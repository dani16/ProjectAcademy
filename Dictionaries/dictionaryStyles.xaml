<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:ProjectAcademy">

    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- BASIC ELEMENTS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style TextBlock Format -->
    <Style TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Calibri" />
    </Style>

    <!-- Style DatePicker -->
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="DatePicker.Background" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="DatePicker.Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="Margin" Value="15,7,0,7" />
        <Setter Property="Width" Value="200" />
    </Style>

    <!-- Style RadioButton Format -->
    <Style TargetType="RadioButton">
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="RadioButton.Foreground" Value="{DynamicResource clrBlueBlack}" />
    </Style>

    <!-- Style CheckBox Format -->
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="TextBlock.Margin" Value="0,20,0,0" />
        <Setter Property="Padding" Value="5,0,5,0" />
    </Style>

    <!-- Style ComboBox -->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="TextBox.Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="TextBox.Background" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="Margin" Value="15,7,0,7" />
    </Style>

    <!-- Style Error -->
    <Style x:Key="styleError" TargetType="{x:Type TextBlock}">
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- TABLES -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style TextBox Headers Tables-->
    <Style x:Key="styleTablesTextHeader" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Margin" Value="5,3"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Style TextBox Cell Tables-->
    <Style x:Key="styleTablesTexCell" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Margin" Value="0,5,0,5"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="MaxLength" Value="4"/>
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- CONVERTERS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Group Icon Converter -->
    <local:clsGroupIconConverter x:Key="GroupIconConvert" />

    <!-- Group Name Converter -->
    <local:clsGroupNameConverter x:Key="GroupNameConverter"/>

    <!-- Group Name Converter -->
    <local:clsMarkDateConverter x:Key="MarkDateConverter"/>

    <!-- Null Date to Text Converter -->
    <local:clsNullDateToTextConverter x:Key="NullDateToTextConvert" />

    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- CALENDAR EVENTS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style Examn Event -->
    <Style x:Key="styleCalendarExamnEvent">
        <Setter Property="Border.Background" Value="{DynamicResource clrRed}"/>
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style Test Event -->
    <Style x:Key="styleCalendarTestEvent">
        <Setter Property="Border.Background" Value="{DynamicResource clrGreen}"/>
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style Holiday Event -->
    <Style x:Key="styleCalendarHolidayEvent">
        <Setter Property="Border.Background" Value="{DynamicResource clrOrange}"/>
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style Other Event -->
    <Style x:Key="styleCalendarOtherEvent">
        <Setter Property="Border.Background" Value="{DynamicResource clrYellow}"/>
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- FORM ELEMENTS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style TextBlock Forms -->
    <Style x:Key="styleTextBlocksForms">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="TextBlock.FontWeight" Value="SemiBold" />
        <Setter Property="TextBlock.HorizontalAlignment" Value="Right" />
        <Setter Property="TextBlock.VerticalAlignment" Value="Center" />
        <Setter Property="TextBlock.Margin" Value="0,7,0,7" />
    </Style>

    <!-- Style TextBox Forms -->
    <Style x:Key="styleTextBoxForms">
        <Setter Property="TextBox.VerticalAlignment" Value="Center" />
        <Setter Property="TextBox.HorizontalAlignment" Value="Center" />
        <Setter Property="TextBox.FontSize" Value="14" />
        <Setter Property="TextBox.Background" Value="White" />
        <Setter Property="TextBox.Width" Value="200" />
        <Setter Property="TextBox.Margin" Value="15,7,0,7" />
        <Setter Property="TextBox.MaxLength" Value="20" />
        <Setter Property="PasswordBox.MaxLength" Value="20" />
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- SEARCHER ELEMENMTS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <Style x:Key="styleBorderSearcher" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource clrBlueBlack}"/>
        <Setter Property="CornerRadius" Value="10,10,10,10"/>
        <Setter Property="Padding" Value="15,0,15,0"/>
        <Setter Property="Background" Value="{DynamicResource clrLightestBlue}"/>
    </Style>

    <!-- Style TextBlock Message Search TextBox -->
    <Style x:Key="styleTextBlocksSearchMessage">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center" />
        <Setter Property="TextBlock.Margin" Value="2" />
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- SETTINGS ELEMENTS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style Settings TextBlocks -->
    <Style x:Key="styleTextSettings">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="TextBlock.FontWeight" Value="Normal" />
        <Setter Property="TextBlock.Margin" Value="0,20,0,0" />
        <Setter Property="TextBlock.Padding" Value="5,0,5,0" />
    </Style>

    <!-- Style Settings Tab Content -->
    <Style x:Key="styleSettingsTabContent">
        <Setter Property="Border.BorderThickness" Value="2"/>
        <Setter Property="Border.BorderBrush" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Border.CornerRadius" Value="2,2,2,2" />
        <Setter Property="Panel.Background" Value="{DynamicResource clrLightestBlue}" />
    </Style>

    <!-- Style Title Border TextBlocks -->
    <Style x:Key="styleTextBorderTitle">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="TextBlock.FontSize" Value="20" />
        <Setter Property="TextBlock.FontWeight" Value="SemiBold" />
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center" />
        <Setter Property="TextBlock.Padding" Value="10,5,10,5"/>
    </Style>

    <!-- Style Title TextBlocks -->
    <Style x:Key="styleTextTitle">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="TextBlock.FontSize" Value="20" />
        <Setter Property="TextBlock.FontWeight" Value="SemiBold" />
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center" />
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- TAB ELEMENTS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style TextBox TabContent -->
    <Style TargetType="TextBox">
        <Setter Property="MaxLength" Value="500" />
        <Setter Property="TextBox.VerticalAlignment" Value="Center" />
        <Setter Property="TextBox.HorizontalAlignment" Value="Center" />
        <Setter Property="TextBox.FontSize" Value="12" />
        <Setter Property="TextBox.Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="TextBox.Background" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="TextBox.Width" Value="200" />
        <Setter Property="TextBox.Margin" Value="15,7,0,7" />
        <Setter Property="TextBox.MaxLength" Value="20" />
        <Setter Property="PasswordBox.MaxLength" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" 
                                             Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ScrollViewer Name="PART_ContentHost" Background="{TemplateBinding Background}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{DynamicResource grdntDisabledTextBoxes}" Property="Background" />
                            <Setter Value="{DynamicResource clrBlueBlack}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style TabItem Header Text -->
    <Style x:Key="styleTabHeaderText">
        <Setter Property="TextBlock.FontSize" Value="12" />
        <Setter Property="TextBlock.FontWeight" Value="Bold" />
        <Setter Property="StackPanel.Margin" Value="5,0,5,0" />
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center" />
        <Setter Property="TextBlock.VerticalAlignment" Value="Center" />
    </Style>

    <!-- Style Tab Content -->
    <Style x:Key="styleTabContent">
        <Setter Property="Border.BorderThickness" Value="3"/>
        <Setter Property="Border.BorderBrush" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="Border.CornerRadius" Value="10,10,10,10" />
        <Setter Property="Panel.Background" Value="{DynamicResource clrDarkBlue}" />
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- DIALOG ELEMENTS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style Dialog Title -->
    <Style x:Key="styleDialogTitle">
        <Setter Property="TextBlock.FontSize" Value="30"/>
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="TextBlock.FontWeight" Value="SemiBold"/>

    </Style>

    <!-- Style Dialog Content -->
    <Style x:Key="styleDialog">
        <Setter Property="Border.BorderThickness" Value="3"/>
        <Setter Property="Border.BorderBrush" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="Border.CornerRadius" Value="7,7,7,7" />
        <Setter Property="Panel.Background" Value="{DynamicResource clrBlueWhite}" />
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- BUTTONS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style Button Link-->
    <Style x:Key="styleLinkButton">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="Button.Cursor" Value="Hand" />
        <Setter Property="Button.Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock TextDecorations="Underline">
                    <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
                <Setter Property="Button.Foreground" Value="{DynamicResource clrBlueWhite}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style Basic Buttons -->
    <Style x:Key="styleBasicButton" TargetType="Button">
        <Setter Property="Margin" Value="0,3,0,5" />
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="130" />
        <Setter Property="MaxWidth" Value="130" />
        <Setter Property="Button.Foreground" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="Button.FontWeight" Value="Bold" />
        <Setter Property="Button.FontSize" Value="12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5,5,5,5">
                        <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Add Button -->
    <Style x:Key="styleAddButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="MaxWidth" Value="160" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkBlue}" CornerRadius="15,15,15,15" Padding="15,7,15,7">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <Image Name="imgLogout" Source="../Images/Basic/add_dark.png" Width="15" Margin="0,0,6,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="imgLogout" Value="../Images/Basic/add_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Accept Button -->
    <Style x:Key="styleAcceptButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="MaxWidth" Value="160" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="15,15,15,15" Padding="15,7,15,7">
                        <Grid HorizontalAlignment="Stretch">
                            <Image HorizontalAlignment="Left" Name="imgLogout" Source="../Images/Basic/accept_dark.png" Width="15" Margin="0,0,6,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="imgLogout" Value="../Images/Basic/accept_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Cancel Button -->
    <Style x:Key="styleCancelButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkestBlue}" />
        <Setter Property="MaxWidth" Value="160" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="15,15,15,15" Padding="15,7,15,7">
                        <Grid HorizontalAlignment="Stretch">
                            <Image HorizontalAlignment="Left" Name="img" Source="../Images/Basic/cancel_dark.png" Width="15" Margin="0,0,6,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/cancel_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Refresh Button -->
    <Style x:Key="styleRefreshButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="200" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="10,10,10,10" Padding="15,5,15,5">
                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                            <Image HorizontalAlignment="Left" Name="img" Source="../Images/Basic/refresh_dark.png" Width="15" Margin="0,0,10,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/refresh_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Save Button -->
    <Style x:Key="styleSaveButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="10,10,10,10" Padding="15,5,15,5">
                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                            <Image HorizontalAlignment="Left" Name="img" Source="../Images/Basic/save_dark.png" Width="15" Margin="0,0,10,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/save_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Edit Button -->
    <Style x:Key="styleEditButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="10,10,10,10" Padding="15,5,15,5">
                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                            <Image HorizontalAlignment="Left" Name="img" Source="../Images/Basic/edit_dark.png" Width="15" Margin="0,0,10,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/edit_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Cancel Edit Button -->
    <Style x:Key="styleCancelEditButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="10,10,10,10" Padding="15,5,15,5">
                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                            <Image HorizontalAlignment="Left" Name="img" Source="../Images/Basic/cancel_dark.png" Width="15" Margin="0,0,10,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/cancel_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Delete Button -->
    <Style x:Key="styleDeleteButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="10,10,10,10" Padding="15,5,15,5">
                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                            <Image HorizontalAlignment="Left" Name="img" Source="../Images/Basic/delete_dark.png" Width="15" Margin="0,0,10,0"/>
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/delete_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Clean Button -->
    <Style x:Key="styleCleanButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="ToolTip" Value="Clean filter"/>
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5">
                        <Image HorizontalAlignment="Center" Name="img" Source="../Images/Basic/cancel_dark.png" Width="15" Margin="10,5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/cancel_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Change Image Button -->
    <Style x:Key="styleChangeImageButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="10,10,10,10">
                        <Image HorizontalAlignment="Center" Name="img" Source="../Images/Basic/change_image_dark.png" Width="15" Margin="10,5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/change_image_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Delete Image Button -->
    <Style x:Key="styleDeleteImageButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="10,10,10,10">
                        <Image HorizontalAlignment="Center" Name="img" Source="../Images/Basic/cancel_dark.png" Width="15" Margin="10,5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="../Images/Basic/cancel_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Remove Button -->
    <Style x:Key="styleRemoveButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MaxHeight" Value="10" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5">
                        <Image HorizontalAlignment="Center" Name="img" Source="/Images/Basic/cancel_dark.png" Width="20" Margin="5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="/Images/Basic/cancel_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Download Button -->
    <Style x:Key="styleDownloadButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="ToolTip" Value="Download Receipt" />
        <Setter Property="MaxHeight" Value="10" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5">
                        <Image HorizontalAlignment="Center" Name="img" Source="/Images/Basic/download_dark.png" Width="20" Margin="5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="/Images/Basic/download_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Print Button -->
    <Style x:Key="stylePrintButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="ToolTip" Value="Print Receipt" />
        <Setter Property="MaxHeight" Value="10" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5">
                        <Image HorizontalAlignment="Center" Name="img" Source="/Images/Basic/print_dark.png" Width="20" Margin="5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="/Images/Basic/print_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style View Button -->
    <Style x:Key="styleViewButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="MaxHeight" Value="20" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5">
                        <Image HorizontalAlignment="Center" Name="img" Source="/Images/Basic/view_dark.png" Width="20" Margin="5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="/Images/Basic/view_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Set Admin Button -->
    <Style x:Key="styleSetAdminButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="ToolTip" Value="Set administrator" />
        <Setter Property="MaxHeight" Value="10" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5">
                        <Image HorizontalAlignment="Center" Name="img" Source="/Images/SettingsTabItems/set_admin_dark.png" Width="20" Margin="5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="/Images/SettingsTabItems/set_admin_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Unset Admin Button -->
    <Style x:Key="styleUnsetAdminButton" TargetType="Button" BasedOn="{StaticResource styleBasicButton}">
        <Setter Property="ToolTip" Value="Unset administrator" />
        <Setter Property="MaxHeight" Value="10" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="Button" BorderThickness="1" BorderBrush="{DynamicResource clrDarkestBlue}" CornerRadius="5">
                        <Image HorizontalAlignment="Center" Name="img" Source="/Images/SettingsTabItems/unset_admin_dark.png" Width="20" Margin="5"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Button IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Button" Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Button Pressed -->
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntHoverTabBackground}"/>
                        </Trigger>

                        <!-- Button Mouse Over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Button" Property="Background" Value="{DynamicResource grdntUnselectedTabBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhite}" />
                            <Setter Property="Image.Source" TargetName="img" Value="/Images/SettingsTabItems/unset_admin_light.png" />
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Setter TargetName="Button" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- EXPANDERS -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style Toggle Button -->
    <ControlTemplate x:Key="styleToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Path x:Name="CollapsedArrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 7 7 L 14 0 Z" 
                      Fill="{DynamicResource clrBlueWhite}">
            </Path>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="CollapsedArrow" Property="Fill" Value="{DynamicResource clrNormalBlue}"/>
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CollapsedArrow" Property="Data" Value="M 0 7 L 7 0 L 14 7 Z"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Style Toggle Button Vertical -->
    <ControlTemplate x:Key="styleVerticalToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Path x:Name="CollapsedArrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 -7 L 0 7 L 7 0 Z" 
                      Fill="{DynamicResource clrBlueWhite}">
            </Path>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="CollapsedArrow" Property="Fill" Value="{DynamicResource clrNormalBlue}"/>
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CollapsedArrow" Property="Data" Value="M 0 0 L 7 7 L 7 -7 Z"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Style Expander Settings -->
    <Style TargetType="Expander" x:Key="styleExpanderSettings">
        <Setter Property="FontSize" Value="15" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid Name="ctrlExpander">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>

                        <!-- Header Expander -->
                        <Border Name="Border" Grid.Row="0" Background="{DynamicResource clrDarkestBlue}" BorderBrush="{DynamicResource clrBlueBlack}"
                                BorderThickness="2" CornerRadius="1,1,0,0" Padding="2" HorizontalAlignment="Stretch">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="20" />
                                </Grid.ColumnDefinitions>

                                <ToggleButton Name="Toggle" Grid.Column="1" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,
                                        RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True"
                                        Background="{DynamicResource clrNormalBlue}" Template="{StaticResource styleToggleButton}"/>
                                <ContentPresenter Grid.Column="0" Margin="4" ContentSource="Header" RecognizesAccessKey="True" HorizontalAlignment="Center" />
                            </Grid>
                        </Border>

                        <!-- Content Expander -->
                        <Border Name="Content" Grid.Row="1" Background="{DynamicResource clrLightBlue}" BorderBrush="{DynamicResource clrBlueWhite}"
                                    BorderThickness="1,0,1,1" CornerRadius="0,0,1,1">
                            <ContentPresenter Margin="20,5,20,10"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--Expand the control Expander-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=Toggle ,Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                            <Setter TargetName="Content" Property="BorderBrush" Value="{DynamicResource clrBlueBlack}"/>
                            <Setter TargetName="Content" Property="BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Expander -->
    <Style x:Key="styleExpander" TargetType="{x:Type Expander}">
        <Setter Property="MaxWidth" Value="850" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid Name="ctrlExpander">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>

                        <!--Header Expander-->
                        <Border Name="Border" Grid.Row="0" Background="{DynamicResource clrDarkestBlue}" BorderBrush="{DynamicResource clrBlueBlack}"
                                BorderThickness="2" CornerRadius="1,1,0,0" Padding="2" HorizontalAlignment="Stretch">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="20" />
                                </Grid.ColumnDefinitions>

                                <ToggleButton Name="Toggle" Grid.Column="1" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,
                                        RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True"
                                        Background="{DynamicResource red}" Template="{StaticResource styleToggleButton}"/>
                                <ContentPresenter Grid.Column="0" Margin="4" ContentSource="Header" RecognizesAccessKey="True" HorizontalAlignment="Center" />
                            </Grid>
                        </Border>

                        <!--Content Expander-->
                        <Border Name="Content" Grid.Row="1" Background="{DynamicResource clrLightestBlue}" BorderBrush="{DynamicResource clrBlueWhite}"
                                    BorderThickness="1,0,1,1" CornerRadius="0,0,1,1">
                            <ContentPresenter Margin="20,5,20,10" VerticalAlignment="Stretch"/>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--Expand the control Expander-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=Toggle ,Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                            <Setter TargetName="Content" Property="BorderBrush" Value="{DynamicResource clrBlueBlack}"/>
                            <Setter TargetName="Content" Property="BorderThickness" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Expander List -->
    <Style x:Key="styleExpanderList" TargetType="{x:Type Expander}">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid Name="ctrlExpander">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="ContentColumn" Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border Name="Border">
                            <ContentPresenter Grid.Column="0"/>
                        </Border>

                        <ToggleButton Name="Toggle" Grid.Column="1" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,
                                        RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True"
                                        Background="{DynamicResource red}" Template="{StaticResource styleVerticalToggleButton}" Margin="-20,0,0,0"/>
                        <ContentPresenter Grid.Column="0" Margin="4" ContentSource="Header" RecognizesAccessKey="True" HorizontalAlignment="Center" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--Expand the control Expander-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=Toggle ,Path=IsChecked}" Value="false" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="ContentColumn" Property="Width" Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                            <Setter TargetName="Border" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- COMBOBOX -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style ComboBox Person -->
    <Style x:Key="styleCmbBxPerson" TargetType="ComboBox">
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Margin" Value="15,7,0,7"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Name="imgLogout" Source="{Binding Path=Photo.Source, Mode=TwoWay}" Width="35" Height="35" Margin="0,0,10,0"/>
                        <TextBlock Text="{Binding Name}" Grid.Row="0" VerticalAlignment="Center" FontSize="12" Margin="5,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}" />
                        <TextBlock Text="{Binding Surname}" Grid.Row="0" VerticalAlignment="Center" FontSize="12" Margin="5,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ComboBox Teacher -->
    <Style x:Key="styleCmbBxTeacher" TargetType="ComboBox">
        <Setter Property="Margin" Value="15,7,0,7"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Name="imgLogout" Source="{Binding Path=Photo.Source, Mode=TwoWay}" Width="35" Height="35" Margin="0,0,10,0"/>
                        <StackPanel Orientation="Vertical" Margin="2">
                            <TextBlock Text="{Binding Name}" Grid.Row="0" VerticalAlignment="Center" FontSize="12" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}" />
                            <TextBlock Text="{Binding Surname}" Grid.Row="0" VerticalAlignment="Center" FontSize="12" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}" />
                        </StackPanel>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ComboBox English Level -->
    <Style x:Key="styleCmbBxLevel" TargetType="ComboBox">
        <Setter Property="Margin" Value="15,7,0,7"/>
        <Setter Property="HorizontalAlignment" Value="left"/>
        <Setter Property="Width" Value="90"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Name="imgGroup" Source="{Binding EnglishLevel, Converter={StaticResource GroupIconConvert}, Mode=TwoWay}" Width="55" Height="55" Margin="0,0,10,0"/>
                        <!--<TextBlock Text="{Binding EnglishLevel}" Grid.Row="0" VerticalAlignment="Center" FontSize="12" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}" />-->
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ComboBox Group -->
    <Style x:Key="styleCmbBxGroup" TargetType="ComboBox">
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Margin" Value="15,7,0,7"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Name="imgGroup" Source="{Binding EnglishLevel, Converter={StaticResource GroupIconConvert}, Mode=TwoWay}" Width="35" Height="35" Margin="0,0,10,0"/>
                        <TextBlock Text="{Binding Description}" Grid.Row="0" VerticalAlignment="Center" FontSize="12" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- LISTBOX -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style TextBlock ListBox Item -->
    <Style x:Key="styleTextBlocksListBoxItem">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueBlack}" />
        <Setter Property="TextBlock.FontSize" Value="14" />
    </Style>

    <!-- Style ListBox Person -->
    <Style x:Key="styleListBoxPerson" TargetType="{x:Type ListBox}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Width" Value="240" />
    </Style>

    <!-- Style ListBox Item Person -->
    <Style x:Key="styleListBoxItemsPerson" TargetType="{x:Type ListBoxItem}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <StackPanel Orientation="Horizontal" Name="itemPanel">
                            <!-- Student Photo -->
                            <Image Name="imgLogout" Source="{Binding Path=Photo.Source, Mode=TwoWay}" Width="55" Height="55" Margin="5"/>
                            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                </Grid.RowDefinitions>

                                <!-- Person Name -->
                                <TextBlock Grid.Row="0" VerticalAlignment="Center" FontWeight="SemiBold" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}">
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name"/>
                                            <Binding Path="Surname"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox Student-->
    <Style x:Key="styleListBoxStudent" TargetType="{x:Type ListBox}">
        <Setter Property="AlternationCount" Value="2" />
    </Style>

    <!-- Style ListBox Item Student-->
    <Style x:Key="styleListBoxItemsStudent" TargetType="{x:Type ListBoxItem}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <StackPanel Orientation="Horizontal" Name="itemPanel">
                            <!-- Student Photo -->
                            <Image Name="imgLogout" Source="{Binding Path=Photo.Source}" Width="55" Height="55" Margin="5"/>
                            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                </Grid.RowDefinitions>

                                <!-- Student Name -->
                                <TextBlock Grid.Row="0" VerticalAlignment="Center" FontWeight="SemiBold" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}">
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} {1}" Mode="OneTime">
                                            <Binding Path="Name"/>
                                            <Binding Path="Surname"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>

                                <!-- Email -->
                                <TextBlock Grid.Row="1" Text="{Binding Path=Email}" VerticalAlignment="Center" Margin="0,0,0,3" Style="{DynamicResource styleTextBlocksListBoxItem}"/>

                                <!-- Telephone -->
                                <TextBlock Grid.Row="2" Text="{Binding Path=Telephone}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksListBoxItem}"/>
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox Item Student with Buttons (View and Delete)-->
    <Style x:Key="styleListBoxItemsStudentWithButtons" TargetType="{x:Type ListBoxItem}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <Grid Name="itemPanel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Orientation="Horizontal">
                                <!-- Student Photo -->
                                <Image Name="imgLogout" Source="{Binding Path=Photo.Source, Mode=TwoWay}" Width="55" Height="55" Margin="5"/>

                                <StackPanel  VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <!-- Student Name -->
                                    <TextBlock VerticalAlignment="Center" FontWeight="SemiBold" Margin="0" Style="{DynamicResource styleTextBlocksListBoxItem}">
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0} {1}">
                                                <Binding Path="Name"/>
                                                <Binding Path="Surname"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>

                                    <!-- Email -->
                                    <TextBlock Text="{Binding Path=Email}" VerticalAlignment="Center" Margin="0" Style="{DynamicResource styleTextBlocksListBoxItem}"/>

                                    <!-- Telephone -->
                                    <TextBlock Text="{Binding Path=Telephone}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksListBoxItem}"/>
                                </StackPanel>
                            </StackPanel>

                            <!-- Buttons Actions Students -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="btnRemoveStudent" Style="{DynamicResource styleRemoveButton}" Margin="10"/>
                                <Button Name="btnViewStudent" Style="{DynamicResource styleViewButton}"  Margin="10"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox Group-->
    <Style x:Key="styleListBoxGroup" TargetType="{x:Type ListBox}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Width" Value="240" />
    </Style>

    <!-- Style ListBox Item Group -->
    <Style x:Key="styleListBoxItemsGroup" TargetType="{x:Type ListBoxItem}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <StackPanel Orientation="Horizontal" Name="itemPanel">
                            <!-- Group Photo -->
                            <Image Name="imgGroup" Source="{Binding EnglishLevel, Converter={StaticResource GroupIconConvert}, Mode=TwoWay}" Width="55" Height="55" Margin="5"/>
                            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                </Grid.RowDefinitions>

                                <!-- Description -->
                                <TextBlock Grid.Row="0" VerticalAlignment="Center" FontWeight="SemiBold" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}"
                                               Text="{Binding Description, Mode=TwoWay}"/>

                                <StackPanel Grid.Row="1" Orientation="Horizontal">
                                    <!-- Creation Date -->
                                    <TextBlock Text="{Binding Path=DateStarting, StringFormat='dd/MM/yyy', Mode=TwoWay}" VerticalAlignment="Center" Margin="0,0,0,3" Style="{DynamicResource styleTextBlocksListBoxItem}"/>

                                    <!-- Separaton -->
                                    <Separator BorderBrush="{DynamicResource clrBlueBlack}" BorderThickness="4" />

                                    <!-- Finish Date -->
                                    <TextBlock Text="{Binding DateFinish, Converter={StaticResource NullDateToTextConvert}, Mode=TwoWay}" VerticalAlignment="Center" Margin="0,0,0,3" Style="{DynamicResource styleTextBlocksListBoxItem}"/>
                                </StackPanel>
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox Item Groups with Buttons (View and Delete)-->
    <Style x:Key="styleListBoxGroupsWithButtons" TargetType="ListBoxItem">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <Grid Name="itemPanel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Orientation="Horizontal">
                                <!-- Group Photo -->
                                <Image Name="imgGroup" Source="{Binding EnglishLevel, Converter={StaticResource GroupIconConvert}, Mode=TwoWay}" Width="55" Height="55" Margin="5"/>
                                <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto" />
                                        <RowDefinition Height="auto" />
                                        <RowDefinition Height="auto" />
                                        <RowDefinition Height="auto" />
                                    </Grid.RowDefinitions>

                                    <!-- Description -->
                                    <TextBlock Grid.Row="0" VerticalAlignment="Center" FontWeight="SemiBold" Margin="0,0,0,5" Style="{DynamicResource styleTextBlocksListBoxItem}"
                                               Text="{Binding Description, Mode=TwoWay}"/>

                                    <StackPanel Grid.Row="1" Orientation="Horizontal">
                                        <!-- Creation Date -->
                                        <TextBlock Text="{Binding Path=DateStarting, StringFormat='dd/MM/yyy'}" VerticalAlignment="Center" Margin="0,0,0,3" Style="{DynamicResource styleTextBlocksListBoxItem}"/>

                                        <!-- Separaton -->
                                        <Separator BorderBrush="{DynamicResource clrBlueBlack}" BorderThickness="4" />

                                        <!-- Finish Date -->
                                        <TextBlock Text="{Binding DateFinish, Converter={StaticResource NullDateToTextConvert}}" VerticalAlignment="Center" Margin="0,0,0,3" Style="{DynamicResource styleTextBlocksListBoxItem}"/>
                                    </StackPanel>
                                </Grid>
                            </StackPanel>

                            <!-- Buttons Actions Groups -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="btnRemoveGroup" Style="{DynamicResource styleRemoveButton}" Margin="10"/>
                                <Button Name="btnViewGroup" Style="{DynamicResource styleViewButton}"  Margin="10"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox Marks -->
    <Style x:Key="styleListBoxMarks" TargetType="{x:Type ListBox}">
        <Setter Property="AlternationCount" Value="2" />
    </Style>

    <!-- Style ListBox Item Marks -->
    <Style x:Key="styleListBoxItemsMark" TargetType="ListBoxItem">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <Grid Name="itemPanel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="5">
                                <!-- Global Calification -->
                                <Border BorderThickness="2" CornerRadius="3" BorderBrush="{DynamicResource clrBlueBlack}" Padding="5" Margin="5,0,15,0" MinWidth="100" Background="{DynamicResource clrNormalBlue}">
                                    <TextBlock Text="{Binding Overall}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksListBoxItem}" FontSize="25" FontWeight="Bold" TextAlignment="Center" Foreground="{DynamicResource clrBlueWhite}"/>
                                </Border>

                                <StackPanel>
                                    <!-- Group Name -->
                                    <TextBlock VerticalAlignment="Center" FontWeight="SemiBold" Margin="0" Style="{DynamicResource styleTextBlocksListBoxItem}" TextWrapping="Wrap"
                                               Text="{Binding GroupID, Converter={StaticResource GroupNameConverter}}"></TextBlock>

                                    <!-- Date Mark -->
                                    <TextBlock Text="{Binding DateMark, Converter={StaticResource MarkDateConverter}}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksListBoxItem}" FontWeight="Normal"/>
                                </StackPanel>
                            </StackPanel>

                            <!-- Buttons Actions Marks -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="btnRemoveMark" Style="{DynamicResource styleRemoveButton}" Margin="10"/>
                                <Button Name="btnPrintMark" Style="{DynamicResource stylePrintButton}"  Margin="10"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox Item Marks With Buttons -->
    <Style x:Key="styleListBoxItemsMarkWithButtons" TargetType="ListBoxItem">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <Grid Name="itemPanel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="5">
                                <!-- Global Calification -->
                                <Border BorderThickness="2" CornerRadius="3" BorderBrush="{DynamicResource clrBlueBlack}" Padding="5" Margin="5,0,15,0" MinWidth="100" Background="{DynamicResource clrNormalBlue}">
                                    <TextBlock Text="{Binding Overall}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksListBoxItem}" FontSize="25" FontWeight="Bold" TextAlignment="Center" Foreground="{DynamicResource clrBlueWhite}"/>
                                </Border>

                                <StackPanel>
                                    <!-- Group Name -->
                                    <TextBlock VerticalAlignment="Center" FontWeight="SemiBold" Margin="0" Style="{DynamicResource styleTextBlocksListBoxItem}" TextWrapping="Wrap"
                                               Text="{Binding GroupID, Converter={StaticResource GroupNameConverter}}"></TextBlock>

                                    <!-- Date Mark -->
                                    <TextBlock Text="{Binding DateMark, Converter={StaticResource MarkDateConverter}}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksListBoxItem}" FontWeight="Normal"/>
                                </StackPanel>
                            </StackPanel>

                            <!-- Buttons Actions Marks -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="btnRemoveMark" Style="{DynamicResource styleRemoveButton}" Margin="10"/>
                                <Button Name="btnViewMark" Style="{DynamicResource styleViewButton}"  Margin="10"/>
                                <Button Name="btnPrintMark" Style="{DynamicResource stylePrintButton}"  Margin="10"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox User -->
    <Style x:Key="styleListBoxUser" TargetType="{x:Type ListBox}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Width" Value="240" />
    </Style>

    <!-- Style ListBox Item User -->
    <Style x:Key="styleListBoxItemsUser" TargetType="ListBoxItem">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <Grid Name="itemPanel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Orientation="Horizontal">
                                <!-- User Photo -->
                                <Image Name="imgLogout" Source="{Binding Path=Teacher.Photo.Source, Mode=TwoWay}" Width="55" Height="55" Margin="5"/>

                                <StackPanel  VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <StackPanel Orientation="Horizontal">
                                        <!-- Username -->
                                        <TextBlock Text="{Binding Path=User.Username}" VerticalAlignment="Center" Margin="0" Style="{DynamicResource styleTextBlocksListBoxItem}"/>

                                        <!-- Type-->
                                        <TextBlock Name="userType" Text="{Binding Path=User.Type}" Visibility="Collapsed"/>
                                        <TextBlock Name="txtType" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksListBoxItem}" Margin="5,0,0,0"/>
                                    </StackPanel>

                                    <!-- Teacher Name -->
                                    <TextBlock VerticalAlignment="Center" FontWeight="SemiBold" Margin="0" Style="{DynamicResource styleTextBlocksListBoxItem}">
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0} {1}">
                                                <Binding Path="Teacher.Name" />
                                                <Binding Path="Teacher.Surname"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                            </StackPanel>

                            <!-- Buttons Action Users -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="btnSetAdmin" Style="{DynamicResource styleSetAdminButton}"  Margin="10"/>
                                <Button Name="btnUnsetAdmin" Style="{DynamicResource styleUnsetAdminButton}"  Margin="10" Visibility="Collapsed"/>
                                <Button Name="btnDeleteUser" Style="{DynamicResource styleRemoveButton}" Margin="10"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ElementName=userType, Path=Text}" Value="True">
                            <Setter TargetName="txtType" Property="TextBlock.Text" Value="(Administrator)" />
                            <Setter TargetName="btnSetAdmin" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnUnsetAdmin" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style ListBox Notifications -->
    <Style x:Key="styleListBoxNotifications" TargetType="{x:Type ListBox}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Width" Value="240" />
    </Style>

    <!-- Style ListBox Item Notifications -->
    <Style x:Key="styleListBoxItemsNotifications" TargetType="ListBoxItem">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrDarkBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="itemBorder" BorderThickness="3">
                        <Grid Name="itemPanel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <StackPanel Orientation="Vertical" Margin="10,5,10,7">
                                    <!-- Subject -->
                                    <TextBlock Text="{Binding Path=Subject}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksForms}" FontSize="17" TextWrapping="Wrap" HorizontalAlignment="Left" Margin="0,0,0,5"/>

                                    <!-- Detail -->
                                    <TextBlock Text="{Binding Path=Detail}" VerticalAlignment="Center" Style="{DynamicResource styleTextBlocksForms}" Margin="5,0,0,0" FontWeight="Normal" TextWrapping="Wrap" TextAlignment="Justify" MaxWidth="250"/>
                                </StackPanel>
                            </StackPanel>

                            <!-- Buttons Action Users -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Name="btnViewNotification" Style="{DynamicResource styleViewButton}"  Margin="5"/>
                                <Button Name="btnDeleteNotification" Style="{DynamicResource styleRemoveButton}" Margin="5"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="itemBorder" Value="{DynamicResource clrLightestBlue}"></Setter>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource clrBlueWhite}"></Setter>
                            <Setter Property="Background" TargetName="itemPanel" Value="{DynamicResource clrNormalBlue}"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition  Property="ItemsControl.AlternationIndex" Value="0"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="{DynamicResource clrBlueWhite}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemPanel" Property="Background" Value="white"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- SCROLLVIEWER -->
    <!-- ***************************************************************************************************************************************************************************** -->
    <!-- Style RepeatButton ScrollViewer -->
    <Style x:Key="styleScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Margin="1" CornerRadius="2" Background="{DynamicResource clrNormalBlue}" BorderBrush="{DynamicResource clrBlueBlack}"
                        BorderThickness="1">
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource clrBlueWhite}"
                            Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource clrBlueBlack}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource clrBlueWhit}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style PageButton ScrollViewer -->
    <Style x:Key="styleScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Thumb ScrollViewer -->
    <Style x:Key="styleScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style Vertical ScrollBar -->
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" CornerRadius="2" Background="#F0F0F0" />
            <RepeatButton Grid.Row="0" Style="{DynamicResource styleScrollBarLineButton}" Height="18"
                Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource styleScrollBarPageButton}"
                        Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{DynamicResource styleScrollBarThumb}" Margin="1,0,1,0" Background="{DynamicResource clrDarkBlue}"
                        BorderBrush="{DynamicResource clrLightBlue}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource styleScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3" Style="{DynamicResource styleScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand"
                Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <!-- Style Horizontal ScrollBar-->
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" CornerRadius="2" Background="#F0F0F0" />
            <RepeatButton Grid.Column="0" Style="{DynamicResource styleScrollBarLineButton}" Width="18"
                Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource styleScrollBarPageButton}"
                        Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{DynamicResource styleScrollBarThumb}" Margin="0,1,0,1" Background="{DynamicResource clrBlueBlack}"
                        BorderBrush="{DynamicResource clrLightBlue}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource styleScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3" Style="{DynamicResource styleScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand"
                Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>

    <!-- Style ScrollBar-->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
